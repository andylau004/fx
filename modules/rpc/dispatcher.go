// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package rpc

import (
	"go.uber.org/fx"
	"go.uber.org/fx/service"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/transport"
)

// Registrant is a wrapper around transport.Registrant
type Registrant struct {
	transport.Registrant
	Handler
}

// Dispatcher is wrapper around yarpc.Dispatcher with rpc.Handler registration
type Dispatcher struct {
	yarpc.Dispatcher
	service.Host
}

// NewDispatcher creates a new dispatcher for yarpc
func NewDispatcher(host service.Host, dispatcher yarpc.Dispatcher) Dispatcher {
	return Dispatcher{
		Host:       host,
		Dispatcher: dispatcher,
	}
}

// Register dispatcher
func (d Dispatcher) Register(rs []Registrant) {
	var registrants []transport.Registrant
	for _, r := range rs {
		registrants = append(registrants, transport.Registrant{
			Service:   r.Service,
			Procedure: r.Procedure,
			Handler:   WrapHandler(d.Host, r.Handler),
		})
	}
	d.Dispatcher.Register(registrants)
}

// WrapRegistrants wraps transport.Registrant into rpc package's wrapper Registrant
// Users need to Wrap transport.Registrants into rpc.Registrants in order to use fx.Context
// in their thrift APIs
func WrapRegistrants(host service.Host, reg []transport.Registrant) []Registrant {
	var registrants []Registrant
	for _, r := range reg {
		reg := Registrant{
			Registrant: r,
			Handler: &transportHandler{
				h: r.Handler,
			},
		}
		registrants = append(registrants, reg)
	}
	return registrants
}

type transportHandler struct {
	h transport.Handler
}

// Handle calls transport.Handler for the autogenerated yarpc handler code
func (th *transportHandler) Handle(ctx fx.Context, req *transport.Request, resw transport.ResponseWriter) error {
	return th.h.Handle(ctx, req, resw)
}
